//Hamiltonian

#include <iostream>
#include <vector>

using namespace std;

const int MAX_VERTICES = 10; // Maximum number of vertices in the graph

// Function to check if vertex v can be added at index 'pos' in the Hamiltonian cycle
bool isSafe(int v, const vector<vector<int>>& graph, vector<int>& path, int pos) {
    // Check if this vertex is an adjacent vertex of the previously added vertex
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex has already been included
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Function to find all Hamiltonian cycles starting from vertex 'pos'
bool hamiltonianCyclesUtil(const vector<vector<int>>& graph, vector<int>& path, int pos, int& count) {
    int V = graph.size();
    // Base case: If all vertices are included in the path
    if (pos == V) {
        // And if there is an edge from the last included vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1) {
            count++;
            // Print the Hamiltonian cycle
            cout << "Hamiltonian Cycle " << count << ": ";
            for (int i = 0; i < V; i++)
                cout << path[i] << " ";
            cout << path[0] << endl;
            return true;
        } else {
            return false;
        }
    }

    // Try different vertices as the next candidate in Hamiltonian Cycle.
    // We start from vertex 1 because vertex 0 is already included in the path
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;
            if (hamiltonianCyclesUtil(graph, path, pos + 1, count))
                return true;
            // Remove vertex from the path if it doesn't lead to a solution
            path[pos] = -1;
        }
    }

    return false;
}

// Function to find all Hamiltonian cycles in a graph
void findHamiltonianCycles(const vector<vector<int>>& graph) {
    int V = graph.size();
    vector<int> path(V, -1); // Initialize path as empty

    int count = 0;
    // Starting from vertex 0 as the first vertex of the Hamiltonian cycle
    path[0] = 0;
    if (!hamiltonianCyclesUtil(graph, path, 1, count)) {
        cout << "No Hamiltonian Cycle exists" << endl;
    } else {
        cout << "Total Hamiltonian Cycles: " << count << endl;
    }
}

int main() {
    int V;
    cout << "Enter the number of vertices (maximum " << MAX_VERTICES << "): ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));

    cout << "Enter the adjacency matrix:" << endl;s
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            cin >> graph[i][j];

    findHamiltonianCycles(graph);

    return 0;
}
